# Default values for vc-authn-chart.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: nginx
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

configuration: 
  secretKey: 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
  